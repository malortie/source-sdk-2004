@include "base.fgd"


//
// CStrike game definition file (.fgd) 

//
// BaseClasses
//

@BaseClass = Target 
[ 
	target(target_destination) : "Target" 
]

@BaseClass = TeamNum
[
	TeamNum(choices) : "Team Number (int)" : 0 =
	[
		2 : "Terrorist"
		3 : "Counter-Terrorist"
	]
	input SetTeam(integer) : "Changes the entity's team"
]



//
// PointClasses
//

@PointClass base(Angles) studio("models/editor/playerstart.mdl") = info_player_deathmatch :
	"This entity marks the start point for terrorists."
[
]

@PointClass base(Angles) studio("models/editor/playerstart.mdl") = info_player_counterterrorist :
	"This entity marks the start point for counter-terrorists."
[
]

@PointClass base(Angles) studio("models/editor/playerstart.mdl") = info_player_terrorist :
	"This entity marks the start point for terrorists."
[
]

@PointClass base(Angles) studio("models/editor/playerstart.mdl") = info_player_logo :
	"This is for logo maps for demos. All players will spawn here, and there will be no " +
	"class menu, team menu, or HUD."
[
]

@PointClass base(Angles) = info_view_parameters :
	"This entity selects whether or not this level uses the Half-Life 2 view parameters (eye height: 64, FOV: 75) " +
	"or the old Counter-Strike settings (eye height: 53.5, FOV: 90)."
[
	ViewMode(choices) : "View Mode" : 0 =
	[
		0 : "Old"
		1 : "New"
	]
]


//
// SolidClasses
//

@SolidClass base(func_physbox) = func_physbox_multiplayer : 
	"This class is the same as func_physbox, except the runtime collisions use a more bouncy method that avoids " +
	"the prediction errors normal physics objects get."
[
]


@SolidClass base(Targetname, TeamNum) = func_buyzone: "Buy Zone" 
[
]


@SolidClass base(Targetname) = func_bomb_target: "Bomb Target" 
[
	output BombExplode(void): "Fires when C4 explodes"
]

@SolidClass base(Targetname) = func_grenade_eater: "Grenade Eater" 
[
	output GrenadeEaten(void): "Fire when we eat a grenade"
]

@SolidClass base(Targetname) = func_hostage_rescue: "Hostage Rescue Zone" 
[
]

@PointClass base(Angles) studio("models/scientist.mdl") = hostage_entity :
	"Hostage"
[
	HostageType(choices) : "Hostage Model (int)" : 0 =
	[
		0 : "A"
		1 : "B"
		1 : "C"
		1 : "D"
	]
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = point_surroundtest
	: "Surround Sound Test"
[
	input FireCorrectOutput(void)	: "Fire output based on snd_surround_speaker cvar value"
	output On2Speakers(void)	: "Fired if player is using 2 speakers."
	output On4Speakers(void)	: "Fired if player is using 4 speakers."
	output On51Speakers(void)	: "Fired if player is using 5.1 speakers."
]



